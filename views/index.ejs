<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Address Mapping</title>

        <!-- Load stylesheets-->
        <link rel="stylesheet"
            href="https://unpkg.com/leaflet/dist/leaflet.css" />
        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/gh/opencagedata/leaflet-opencage-geocoding@v2.0.0/dist/css/L.Control.OpenCageGeocoding.min.css" />
        <link rel="stylesheet"
            href="http://code.ionicframework.com/ionicons/1.5.2/css/ionicons.min.css">
        <link rel="stylesheet" href="../stylesheets/styles.css">
    </head>

    <body>
        <!-- load scripts -->
        <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
        <script
            src="https://cdn.jsdelivr.net/gh/opencagedata/leaflet-opencage-geocoding@v2.0.0/dist/js/L.Control.OpenCageGeocoding.min.js"></script>

        <!-- set a div for our map -->
        <div id="mapone"></div>

        <script>
            // This key comes from a .env file
            // !! It will be public - i.e ctrl + u in a browser
            // !! in any kind of prod needs IP / domain restriction!
            const mapsApiKey = '<%= mapsApiKey %>';
            const geoserverUrl = '<%= geoserverUrl %>';

            // url is in the form 'https://geoserver.domainname.com.au/geoserver/workspacename/'
            // we need to put the type of query on the end
            const wmsUrl = geoserverUrl + 'wms'

            // map starting point
            let initialLng = 144.9
            let initialLat = -37.8
            let initialZoom = 8

            // create map
            var map = L.map('mapone').setView([initialLat, initialLng], initialZoom);

            // add osm base layer
            var osmBaseLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}', {
                attribution: '&copy; Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
            })

            // opencage geocoding control
            var options = {
                key: mapsApiKey,
                limit: 5,
                position: 'topright',
                placeholder: 'Search...',
                errorMessage: 'Nothing found.',
                showResultIcons: false,
                collapsed: true,
                expand: 'click',
                addResultToMap: true
            };
            
            // put control on map
            var control = L.Control.openCageGeocoding(options).addTo(map);

            // function to get properties from wfs query
            function fetchPropertiesFromWFS(queryUrl) {
                return fetch(queryUrl)
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(function(data) {
                        // Handle GeoServer response
                        if (data.features.length > 0) {
                            var feature = data.features[0];
                            var properties = feature.properties; // Access properties of the intersecting feature
                            console.log('Feature properties:', properties);
                            return properties; // Return the properties object
                        } else {
                            console.log('No feature found.');
                            return null; // Return null if no feature is found
                        }
                    })
                    .catch(function(error) {
                        console.error('Error fetching data:', error);
                        throw error; // Re-throw the error for handling in the caller function
                    });
            }
            
            // function to build wfs query for a lat lng pair
            // returns the properties of the polygon they fall into on a polygon layer
            function buildWfsQueryUrl(latLng, layer) {
                var typeName = layer

                wfsUrl = '<%= geoserverUrl %>' + 'ows'
                console.log(wfsUrl)

                var filter = 'INTERSECTS(the_geom, POINT(' + latLng.lng + ' ' + latLng.lat + '))'
            
                var queryUrl = wfsUrl + '?' +
                'service=WFS' +
                '&version=1.0.0' +
                '&request=GetFeature' +
                '&typeName=' + typeName +
                '&outputFormat=application/json' +
                '&srsName=EPSG:4326' +
                '&cql_filter=' + encodeURIComponent(filter);

                return queryUrl
            }

            // returns "Joseph Robinette Biden" from "joseph robinette biden", "JOSEPH ROBINETTE BIDEN", etc
            function titleCase(str) {
                return str.toLowerCase().replace(/(?:^|\s)\w/g, function(match) {
                    return match.toUpperCase();
                });
            }

            // bind logic to a marker click
            // get properties from various geoserver layers and put them in the popup
            async function handleMarkerClick(event) {
                var marker = event.target;
                var latLng = marker.getLatLng();
                console.log('Marker clicked at:', latLng);
               
                // get fed elec
                layer = 'electorates:2022 Federal Electorates'; // Adjust your workspace and layer name
                var wfsUrl = buildWfsQueryUrl(latLng, layer)
                var properties = await fetchPropertiesFromWFS(wfsUrl)
                federalElec = properties['Elect_div']

                // get state elec
                layer = 'electorates:State Electorates Current'; // Adjust your workspace and layer name
                var wfsUrl = buildWfsQueryUrl(latLng, layer)
                var properties = await fetchPropertiesFromWFS(wfsUrl)
                stateElec = titleCase(properties['elecName'])
                console.log(federalElec, stateElec)

                // bind to a popup on the marker
                marker.bindPopup("Federal Electorate: "+federalElec+"<br />"+"State Electorate: "+stateElec);
                
                // open the popup
                marker.openPopup();

                // set zoom level
                map.setView(latLng, 14); // Set zoom level to 15 when marker is clicked
            
            }

            //Todo can this be separate?
            // Manually bind click event to markers on map load
            map.on('layeradd', function (event) {
                var layer = event.layer;
                if (layer instanceof L.Marker) {
                    layer.on('click', handleMarkerClick);
                }
            });

            // // !! FOR DEV
            // // Optional: Add a marker manually for testing
            // var testMarker = L.marker([initialLat, initialLng]).addTo(map);
            // testMarker.bindPopup("Test Marker");

            // define overlay layers
            var state_electorates = L.tileLayer.wms(wmsUrl, {
                layers: 'electorates:State Electorates Current',
                format: 'image/png',
                styles: 'state_electorates_no_labels',
                transparent: true,
            });

            var state_electorates_with_labels = L.tileLayer.wms(wmsUrl, {
                layers: 'electorates:State Electorates Current',
                format: 'image/png',
                styles: 'state_electorates',
                transparent: true,
            });


            var federal_electorates = L.tileLayer.wms(wmsUrl, {
                layers: 'electorates:2022 Federal Electorates',
                format: 'image/png',
                styles: 'federal_electorates_no_labels',
                transparent: true,
            });

            var federal_electorates_with_labels = L.tileLayer.wms(wmsUrl, {
                layers: 'electorates:2022 Federal Electorates',
                format: 'image/png',
                styles: 'federal_electorates',
                transparent: true,
            });

            // Creating an overlays object
            var overlays = {
                "Federal Electorates": federal_electorates,
                "State Electorates": state_electorates,
                "Federal Electorates with Labels": federal_electorates_with_labels,
                "State Electorates with Labels": state_electorates_with_labels
            };

            var baseLayers = {
                "OpenStreetMap": osmBaseLayer,
            };

            // add control to map
            L.control.layers(baseLayers, overlays, {
                position: 'bottomright',
                collapsed: false // false to have the control always open
            }).addTo(map);

            // set initial state
            osmBaseLayer.addTo(map)
            federal_electorates.addTo(map)
            state_electorates.addTo(map)
            
            
         </script>
    </body>

</html>